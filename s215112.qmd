---
title: "s215112"
author: "manchedtudk"
format: html
editor: visual
---

### Getting Started

The following exercises have to be done in your groups! You must move at the same pace and progress together as a team through the exercises!

GitHub is the place for collaborative coding and different group members will have to do different tasks in a specific order, to make it through the exercises together, so... Team Up and don't rush it!

First, select a team Captain, that person will have to carry out specific tasks. If Team is stated, then that refers to all group members and lastly if Crew is stated, then that is everyone but the Captain. Please note, that tasks are sequential, so if a task is assigned to the Captain, then the Crew has to await completion before proceeding!

##### Team 

1.  Go to GitHub and login

2.  In the upper left corner, click Repositories Captain The default owner of the repository should be your GitHub username. Keep that, please. Name the repository groupXX, where XX is your group number, e.g. 02 Select Public Tick Add a README file Click Create repository Click Settings in the menu line starting with \<\> Code Under Access, click Collaborators and teams Click Add people Write a group members username Repeat for all group members Crew Check your mail and accept your invitation to join the repository Team Click here to go to the course RStudio cloud server and login In the upper right corner, where it should say r_for_bio_data_science, click Choose New Project... Select Version Control Select Git Under Repository URL:, enter https://github.com/CAPTAIN_USERNAME/groupXX, where again you replace XX with your group number, e.g. 02. NOTE: Replace CAPTAIN_USERNAME with the captain's GitHub username. Under Project directory name:, enter lab07_git_exercises Under Create project as a subdirectory of:, make sure that is says \~/projects Click Create Project

Congratulations! You have just cloned your first GitHub repository!

In your Files-pane, you should now see:

![](https://r4bds.github.io/images/git_first_files.png)

...and now in your Environment-pane, you should see a new git-tab:

![](https://r4bds.github.io/images/git_environment_pane.png)

If you click the git-tab, you should see:

![](https://r4bds.github.io/images/environment_pane_git_tab.png)

Your first collaboration Team Create a new Quarto document, title it student_id and save id as student_id.qmd, where student_id is your... You guessed it! In the environment-pane, click the git-tab Tick the 3 boxes under staged Click commit In the upper right corner, add a Commit message, e.g "First commit by student_id" Click the Commit-button A pop-up, will give you details on your commit, look through them and then click Close Now, very important ALWAYS click the Pull-button BEFORE clicking the Push-button Clicking Pull, you should see "Already up to date." Then click Push

#### Q4: Discuss in your group, what happened and why? Try copying the message and paste it into google, did you get any hits?

> > > /usr/bin/git push origin HEAD:refs/heads/main remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. fatal: Authentication failed for 'https://github.com/emilieengdal/group25/' ---

GitHub doesn't know who you are, you're just someone who cloned your first GitHub repository and now you want to do all sorts of stuff! We can't have that, so let's fix that GitHub doesn't know who you are!

1.  In the `Console`, run the command:

`usethis::use_git_config(user.name = "manchedtudk", user.email = "s215112@student.dtu.dk")`

2.  In the `Console`, run the command:

`usethis::create_github_token()`

***My token:*** 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

### Your next collaboration

#### **Captain**

1.  Create a new Quarto Document, title it \"Group Document\" and save it as `group_document.qmd`

2.  Using markdown headers, create one section for each group member, incl. yourself. Here, you can use your names, student ids or whatever you deem appropriate

3.  Again in the `Environment`-pane, make sure you are in the `git`-tab and then tick the box next to `group_document.qmd`

4.  Click `Commit`

5.  Add a commit message, e.g. \"Add group document\"

6.  Click the `Commit`-button

7.  Click `Pull` (You should be \"Already up to date.\")

8.  Click `Push`

9.  Click `Close`

10. Again, go to the group GitHub and confirm that you see the new document you just created

#### **Crew**

1.  Click `Pull` and confirm that you now also have the file `group_document.qmd`

2.  Open `group_document.qmd` and find your assigned section

3.  In your section and your section only, enter some text, add a few code chunks with some `R`-code

4.  Make sure to save the document

5.  Now again, find the `group_document.qmd` in the `git`-tab of the `Environment`-pane and tick the box under `Staged`

6.  Click `Commit`

7.  Note how your changes to the document are highlighted in green

8.  Add a commit message, e.g. \"Update the STUDENT_ID section\" and click `Commit`

9.  Click `Close`

10. Click `Pull`

11. Click `Push`

12. Go to the group GitHub, find the `group_document.qmd` and click it, do you see your changes?

Once **everyone** has added to their assigned section, **everyone** should do a pull/push, so **everyone** has the complete version of the `group_document.qmd`.

### Your first branching

Ok that\'s pretty great so far - Right? The thing is... Consider, the `ggplot2` repository, that you found in *T1*. Thousands of companies and even more thousands of people rely on `ggplot` for advanced data visualisation. What would happen, if you wanted to add a new feature or wanted to optimise an existing one, while people were actively installing your package? They would get what stage your code was in, which may or may not be functional - Enter branching!

Below here, is an illustration, consider the **Master** the stable version people can download and use and then **Your Work** will be the feature or update that you personally are working on. **Someone Else\'s Work** will be another team and that persons work on a new feature or update. Before the last **green** circle, note how both the **Your Work**- and **Someone Else\'s Work**-branches are merged onto the **Master**-branch.

![](https://r4bds.github.io/images/git_branching_merging.png)

There can be even more branches

**Q4:** Again, find the `ggplot` GitHub site and see if you can find how many branches there are?

There are 71 branches.
